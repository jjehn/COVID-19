server <- function(input, output) {
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "deathrate",
label = "Set estimated death rate",
value = est_death_rate,
min = 0.001, max = 5),
sliderInput(inputId = "doublingtime",
label = "Set estimated doubling time",
value = est_doubling_time,
min = 2, max = 20),
checkboxInput(inputId = "restrictions",
label = "Calculate without effective restrictions?",
value = F),
plotOutput(outputId = "table")
)
server <- function(input, output) {
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# in case of restrictions do not apply doubling factor
x<-reactive({input$restrictions})
if(x()==F){
deaths_data$infected_today <- deaths_data$infected_15.3D_bd
}
else {
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
}
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "deathrate",
label = "Set estimated death rate",
value = est_death_rate,
min = 0.001, max = 5),
sliderInput(inputId = "doublingtime",
label = "Set estimated doubling time",
value = est_doubling_time,
min = 2, max = 20),
checkboxInput(inputId = "restrictions",
label = "Calculate without effective restrictions?",
value = F),
plotOutput(outputId = "table")
)
server <- function(input, output) {
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# in case of restrictions do not apply doubling factor
x<-reactive({input$restrictions})
if(x()==F){
deaths_data$infected_today <- deaths_data$infected_15.3D_bd
}
else {
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
}
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "deathrate",
label = "Set estimated death rate",
value = est_death_rate,
min = 0.001, max = 5),
sliderInput(inputId = "doublingtime",
label = "Set estimated doubling time",
value = est_doubling_time,
min = 2, max = 20),
checkboxInput(inputId = "restrictions",
label = "Calculate without effective restrictions?",
value = F),
plotOutput(outputId = "table")
)
server <- function(input, output) {
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# in case of restrictions do not apply doubling factor
x<-reactive({input$restrictions})
if(x()==F){
deaths_data$infected_today <- deaths_data$infected_15.3D_bd
}
else {
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
}
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "deathrate",
label = "Set estimated death rate",
value = est_death_rate,
min = 0.01, max = 5),
sliderInput(inputId = "doublingtime",
label = "Set estimated doubling time",
value = est_doubling_time,
min = 2, max = 20),
checkboxInput(inputId = "restrictions",
label = "Calculate without effective restrictions?",
value = F),
plotOutput(outputId = "table")
)
server <- function(input, output) {
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# in case of restrictions do not apply doubling factor
x<-reactive({input$restrictions})
if(x()==F){
deaths_data$infected_today <- deaths_data$infected_15.3D_bd
}
else {
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
}
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
# set estimation coefficients
est_death_rate <- 1
ui <- fluidPage(
sliderInput(inputId = "deathrate",
label = "Set estimated death rate",
value = est_death_rate,
min = 0.01, max = 5),
sliderInput(inputId = "doublingtime",
label = "Set estimated doubling time",
value = est_doubling_time,
min = 2, max = 20),
checkboxInput(inputId = "restrictions",
label = "Calculate without effective restrictions?",
value = F),
plotOutput(outputId = "table")
)
server <- function(input, output) {
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# in case of restrictions do not apply doubling factor
x<-reactive({input$restrictions})
if(x()==F){
deaths_data$infected_today <- deaths_data$infected_15.3D_bd
}
else {
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
}
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "deathrate",
label = "Set estimated death rate",
value = est_death_rate,
min = 0.01, max = 5),
checkboxInput(inputId = "restrictions",
label = "Calculate without effective restrictions?",
value = F),
uiOutput("slider_control"),
plotOutput(outputId = "table")
)
server <- function(input, output) {
output$slider_control = renderUI({
if (input$restrictions == 0) {
return(NULL)
}
else {
sliderInput(inputId = "doublingtime",
label = "Set estimated doubling time",
value = est_doubling_time,
min = 2, max = 20)
}
})
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# in case of restrictions do not apply doubling factor
x<-reactive({input$restrictions})
if(x()==F){
deaths_data$infected_today <- deaths_data$infected_15.3D_bd
}
else {
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
}
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "deathrate",
label = "Set estimated death rate",
value = est_death_rate,
min = 0.01, max = 5),
checkboxInput(inputId = "restrictions",
label = "Calculate without effective restrictions?",
value = F),
uiOutput("slider_control"),
plotOutput(outputId = "table")
)
server <- function(input, output) {
output$slider_control = renderUI({
if (input$restrictions == F) {
return(NULL)
}
else {
sliderInput(inputId = "doublingtime",
label = "Set estimated doubling time",
value = est_doubling_time,
min = 2, max = 20)
}
})
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# in case of restrictions do not apply doubling factor
x<-reactive({input$restrictions})
if(x()==F){
deaths_data$infected_today <- deaths_data$infected_15.3D_bd
}
else {
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
}
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "deathrate",
label = "Set estimated death rate",
value = est_death_rate,
min = 0.01, max = 5),
checkboxInput(inputId = "restrictions",
label = "Calculate without effective restrictions?",
value = F),
uiOutput("slider_control"),
plotOutput(outputId = "table")
)
server <- function(input, output) {
output$slider_control = renderUI({
if (input$restrictions == F) {
return(NULL)
}
else {
sliderInput(inputId = "doublingtime",
label = "Set estimated doubling time",
value = est_doubling_time,
min = 2, max = 20)
}
})
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# in case of restrictions do not apply doubling factor
if (input$restrictions == F) {
deaths_data$infected_today <- deaths_data$infected_15.3D_bd
}
else {
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
}
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "deathrate",
label = "Set estimated death rate",
value = est_death_rate,
min = 0.01, max = 5),
checkboxInput(inputId = "restrictions",
label = "Calculate without effective restrictions?",
value = F),
uiOutput("slider_control"),
plotOutput(outputId = "table")
)
server <- function(input, output) {
output$slider_control = renderUI({
if (input$restrictions = F) {
return(NULL)
}
else {
sliderInput(inputId = "doublingtime",
label = "Set estimated doubling time",
value = est_doubling_time,
min = 2, max = 20)
}
})
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# in case of restrictions do not apply doubling factor
if (input$restrictions == F) {
deaths_data$infected_today <- deaths_data$infected_15.3D_bd
}
else {
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
}
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
head(deaths_data)
ui <- fluidPage(
sliderInput(inputId = "deathrate",
label = "Set estimated death rate",
value = est_death_rate,
min = 0.01, max = 5),
checkboxInput(inputId = "restrictions",
label = "Calculate without effective restrictions?",
value = F),
uiOutput("slider_control"),
plotOutput(outputId = "table")
)
server <- function(input, output) {
output$slider_control = renderUI({
if (input$restrictions == F) {
return(NULL)
}
else {
sliderInput(inputId = "doublingtime",
label = "Set estimated doubling time",
value = est_doubling_time,
min = 2, max = 20)
}
})
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# in case of restrictions do not apply doubling factor
if (input$restrictions == F) {
deaths_data$infected_today <- deaths_data$infected_15.3D_bd
}
else {
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
}
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "deathrate",
label = "Set estimated death rate",
value = est_death_rate,
min = 0.01, max = 5),
checkboxInput(inputId = "restrictions",
label = "Calculate without effective restrictions?",
value = F),
uiOutput("slider_control"),
plotOutput(outputId = "table")
)
server <- function(input, output) {
output$slider_control = renderUI({
if (input$restrictions == F) {
return(NULL)
}
else {
sliderInput(inputId = "doublingtime",
label = "Set estimated doubling time",
value = est_doubling_time,
min = 2, max = 20)
}
})
output$table <- renderPlot(
{# estimate number of infections 15.3 days ago based on deaths of today
deaths_data$infected_15.3D_bd <- deaths_data$deaths_today*(100/input$deathrate)
# in case of restrictions do not apply doubling factor
if (input$restrictions == F) {
deaths_data$infected_today <- deaths_data$infected_15.3D_bd
}
else {
# estimate number of actual infections based on doubling factor added on 15.3 days before infections
deaths_data$infected_today <- deaths_data$infected_15.3D_bd*2^(15.3/input$doublingtime)
}
# sort countries by from most infected to least infectes and reduce to 10 (China is left out as restrictions seem to be successful)
most_infected_countries <- head(deaths_data[order(deaths_data$infected_today, decreasing = T),],11)
most_infected_countries <- most_infected_countries[-grep("China", most_infected_countries$Country.Region),]
# generate barplot
barplot(most_infected_countries$infected_today,
main="Estimate of infected people up to date", horiz=F,
names.arg = most_infected_countries$Country.Region)
}
)
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='jjehn',
token='3A1378243C135F4E218418269B345890',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jjehn',
token='3A1378243C135F4E218418269B345890',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jjehn', token='3A1378243C135F4E218418269B345890', secret='oolL6Sg6cnqohEeNxE064t/fH5Q8FdtyUM+13P18')
library(rsconnect)
rsconnect::deployApp()
getwd()
rsconnect::deployApp('C:/Users/jjehn/Documents/COVID-19')
rsconnect::deployApp('C:/Users/jjehn/Documents/COVID-19/data_extraction_timeseries_shiny.R')
runApp()
getwd()
runApp('data_extraction_timeseries_shiny.R')
library(shiny)
runApp()
deployApp()
library(shiny); runApp('data_extraction_timeseries_shiny.R')
runApp('data_extraction_timeseries_shiny.R')
runApp('data_extraction_timeseries_shiny.R')
runApp('data_extraction_timeseries_shiny.R')
runApp('data_extraction_timeseries_shiny.R')
runApp('data_extraction_timeseries_shiny.R')
runApp('data_extraction_timeseries_shiny.R')
runApp('data_extraction_timeseries_shiny.R')
runApp('data_extraction_timeseries_shiny.R')
runApp('data_extraction_timeseries_shiny.R')
runApp('data_extraction_timeseries_shiny.R')
